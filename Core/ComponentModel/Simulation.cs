using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;

namespace Gem.ComponentModel
{
    public class Simulation
    {
        private Common.BufferedList<Component> created = new Common.BufferedList<Component>();
        private Common.BufferedList<UInt32> destroyed = new Common.BufferedList<UInt32>();
        public List<IModule> modules = new List<IModule>();
        private UInt32 nextGlobalEntityID = 1;
        private UInt32 nextLocalEntityID = 0xFFFFFF00;
        internal Action<byte[]> sendMessageHandler = null;
        private Dictionary<String, Action<ObjectList>> eventHandlers = new Dictionary<string, Action<ObjectList>>();
        private Common.BufferedList<Tuple<String, ObjectList>> eventQueue = 
            new Common.BufferedList<Tuple<String, ObjectList>>();
        private float cachedElapsedSeconds;

        public bool IsLocalEntity(UInt32 id)
        {
            return id >= 0x80000000;
        }

        public ContentManifestExtensions.EpisodeContentManager Content;

        public Action<String> debugOutput = null;
        public void debug(String str) { if (debugOutput != null) debugOutput(str); }
        public PropertySet settings;

        public Simulation(Microsoft.Xna.Framework.Content.ContentManager rawContent, PropertySet settings)
        {
            Content = new ContentManifestExtensions.EpisodeContentManager(rawContent.ServiceProvider,
                rawContent.RootDirectory, settings["episode-name"].ToString());


            #region MISP Bindings

            //#region Events and Messages
            //scriptEngine.AddFunction("message", "Send a message to the server or clients.", (context, arguments) =>
            //    {
            //        var id = MISP.AutoBind.StringArgument(arguments[0]);
            //        var data = MISP.AutoBind.ListArgument(arguments[1]);
            //        if (sendMessageHandler != null)
            //            sendMessageHandler(Network.ScriptMessage.EncodeMessage(id, data));
            //        return null;
            //    }, MISP.Arguments.Arg("message-id"), MISP.Arguments.Repeat("data"));

            //scriptEngine.AddFunction("local-message", "Send a message to yourself.", (context, arguments) =>
            //{
            //    var id = MISP.AutoBind.StringArgument(arguments[0]);
            //    var data = MISP.AutoBind.ListArgument(arguments[1]);
            //    EnqueueEvent(id, data);
            //    return null;
            //}, MISP.Arguments.Arg("message-id"), MISP.Arguments.Repeat("data"));

            //scriptEngine.AddFunction("set-handler", "Set a message handler.", (context, arguments) =>
            //    {
            //        var id = MISP.AutoBind.StringArgument(arguments[0]);
            //        var handler = MISP.AutoBind.LazyArgument(arguments[1]);
            //        if (!MISP.Function.IsFunction(handler))
            //            handler = MISP.Function.MakeFunction("generated-function", MISP.Arguments.Args(),
            //                "Generated by set-handler", handler, context.Scope, true);
            //        eventHandlers.SetProperty(id, handler);
            //        return handler;
            //    }, MISP.Arguments.Arg("message-id"), MISP.Arguments.Lazy("code", "Code or an existing function."));
            //#endregion

            #endregion

            this.settings = settings;
        }

        public void EnqueueEvent(String id, ObjectList data)
        {
            eventQueue.Add(new Tuple<String, ObjectList>(id, data));
        }

        public T FindModule<T>() where T : class, IModule
        {
            foreach (var module in modules)
                if (module is T) return module as T;
            return null;
        }

        public void beginSimulation()
        {
            foreach (var module in modules) module.BeginSimulation(this);
        }

        public void endSimulation()
        {
            foreach (var module in modules) module.EndSimulation();
        }

        public void update(float ElapsedSeconds)
        {
            cachedElapsedSeconds = ElapsedSeconds;

            created.Swap();
            foreach (var m in modules) m.AddComponents(created.Front);
            created.ClearFront();

            destroyed.Swap();
            foreach (var m in modules) m.RemoveEntities(destroyed.Front); 
            destroyed.ClearFront();

            foreach (var module in modules) module.Update(ElapsedSeconds);

            eventQueue.Swap();
            foreach (var e in eventQueue)
            {
                Object handler = null;
                ObjectList args = e.Item2;
                if (e.Item1 == "@raw-input-event")
                {
                    if (args.Count > 0)
                    {
                        handler = args[0];
                        args.RemoveAt(0);
                    }
                    else
                        debug("Invalid input event.");
                }
                else if (eventHandlers.ContainsKey(e.Item1))
                    handler = eventHandlers[e.Item1];
                if (handler == null) debug("Invalid queued event.");
                if (handler is Action<ObjectList>)
                {
                    (handler as Action<ObjectList>).Invoke(args);
                }
                else
                    debug("Invalid event handler.");
            }
            eventQueue.ClearFront();
        }

        public void AddEntity(uint id, params Component[] components)
        {
            foreach (var component in components) component.EntityID = id;
            created.AddRange(components);
        }

        public void RemoveEntities(params UInt32[] id)
        {
            destroyed.AddRange(id);
        }
    }
}
